import React, { useState, useRef, useEffect } from 'react';
import Artists from './Artists';
import { useSession } from 'next-auth/react';
import { ArtistType } from '../types';

const getAccessToken = async () => {
  const SPOTIFY_CLIENT_ID = process.env.NEXT_PUBLIC_SPOTIFY_CLIENT_ID;
  const SPOTIFY_CLIENT_SECRET = process.env.NEXT_PUBLIC_SPOTIFY_CLIENT_SECRET;
  const SPOTIFY_REFRESH_TOKEN = process.env.NEXT_PUBLIC_SPOTIFY_REFRESH_TOKEN;
  const BASIC = Buffer.from(
    `${SPOTIFY_CLIENT_ID}:${SPOTIFY_CLIENT_SECRET}`
  ).toString('base64');
  const TOKEN_ENDPOINT = `https://accounts.spotify.com/api/token?`;
  const TOKEN_URL =
    TOKEN_ENDPOINT +
    new URLSearchParams({
      grant_type: 'refresh_token',
      refresh_token: SPOTIFY_REFRESH_TOKEN,
    });
  const response = await fetch(TOKEN_URL, {
    headers: {
      Authorization: `Basic ${BASIC}`,
      'Content-Type': 'application/x-www-form-urlencoded',
    },
    method: 'POST',
  });
  return response.json();
};

const getTopTracksForArtist = async (artistId: string) => {
  const { access_token } = await getAccessToken();
  const response = await fetch(
    `https://api.spotify.com/v1/artists/${artistId}/top-tracks?market=US&limit=3`,
    {
      headers: {
        Authorization: `Bearer ${access_token}`,
      },
    }
  );
  const { tracks } = await response.json();
  return tracks.splice(0, 2);
};

const createPlaylistForUser = async (
  userId: string,
  setPlaylistId: Function
) => {
  const url = `https://api.spotify.com/v1/users/${userId}/playlists`;
  const payload = {
    name: 'Concert Poster to Playlist',
    description: 'A playlist generated by uploading a concert poster image',
    public: true,
  };
  const { access_token } = await getAccessToken();

  const response = await fetch(url, {
    method: 'POST',
    headers: {
      Authorization: `Bearer ${access_token}`,
    },
    body: JSON.stringify(payload),
  });
  const data = await response.json();
  if (data.id) {
    setPlaylistId(data.id);
  }
  console.log(`Playlist successfully created: `, data);
  return data;
};

const addTracksToPlaylist = async (playlistId: string, uris: string[]) => {
  const url = `https://api.spotify.com/v1/playlists/${playlistId}/tracks`;
  const payload = {
    uris,
  };
  const { access_token } = await getAccessToken();

  const response = await fetch(url, {
    method: 'POST',
    headers: {
      Authorization: `Bearer ${access_token}`,
    },
    body: JSON.stringify(payload),
  });
  const data = await response.json();
  console.log(`successfully added tracks to playlist ${playlistId}: `, data);
  return data;
};

const SpotifyExample = (props) => {
  const { currentData, isLoading, setIsLoading } = props;
  console.log(`what is currentData in spotifyexmaple: `, currentData);
  const { data: session } = useSession();
  const [tracks, setTracks] = useState([]);
  const [trackUris, setTrackUris] = useState([]);
  const [playlistId, setPlaylistId] = useState('');

  useEffect(() => {
    async function fetchData() {
      // const topTracks = await getTopTracksForArtist(currentData[0].id);
      const promises = currentData.map((artist: ArtistType) =>
        getTopTracksForArtist(artist.id)
      );
      const topTracks = await Promise.all(promises);
      const flattened = topTracks.flat().splice(0, 100);
      console.log(`got back top tracks: `, flattened);
      setTracks(flattened);
      const trackUris = flattened.map((track) => track.uri);
      setTrackUris(trackUris);
    }

    fetchData();
  }, []);

  const handleSave = async () => {
    const userId = session?.token?.sub;
    createPlaylistForUser(userId, setPlaylistId);
  };

  const handleAdd = () => {
    addTracksToPlaylist(playlistId, trackUris);
  };

  if (currentData.length === 0) return null;
  return (
    <>
      {isLoading && <div>hi</div>}
      <Artists artists={currentData} />
      <button onClick={handleSave}>Create playlist</button>
      <button onClick={handleAdd}>Add songs to playlist</button>
    </>
  );
};

export default SpotifyExample;
