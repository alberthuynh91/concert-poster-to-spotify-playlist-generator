function onlyLettersAndNumbers(str: string) {
	return /^[A-Za-z0-9]*$/.test(str);
}

// TODO: Improve this function as it only returns back some of the artists
export const parseArtistsFromOcrString = (ocrString: string): string[] => {
  const splitString = ocrString.split(' - ')
  const filteredList: any = []
  splitString.forEach((item) => {
    const lowered = item.toLowerCase().replace(/\s/g, '')
    // contains only letters and numbers
    if (onlyLettersAndNumbers(lowered)) {
      // console.log(`found only letters/numbers: `, item)
      filteredList.push(item)
    } else if (item.split(/[^A-Za-z0-9]/).length === 2) {
      // filteredList = filteredList.concat(item.split(/[^A-Za-z0-9]/))
      filteredList.push(item.split(/[^A-Za-z0-9]/)[0])
      filteredList.push(item.split(/[^A-Za-z0-9]/)[1])
    } 
  })
  return filteredList
}

// TODO: Put API calls in the correct place
export const getAccessToken = async () => {
  const SPOTIFY_CLIENT_ID = process.env.NEXT_PUBLIC_SPOTIFY_CLIENT_ID;
  const SPOTIFY_CLIENT_SECRET = process.env.NEXT_PUBLIC_SPOTIFY_CLIENT_SECRET;
  const SPOTIFY_REFRESH_TOKEN = process.env.NEXT_PUBLIC_SPOTIFY_REFRESH_TOKEN;
  const BASIC = Buffer.from(
    `${SPOTIFY_CLIENT_ID}:${SPOTIFY_CLIENT_SECRET}`
  ).toString('base64');
  const TOKEN_ENDPOINT = `https://accounts.spotify.com/api/token?`;
  const TOKEN_URL =
    TOKEN_ENDPOINT +
    // @ts-expect-error
    new URLSearchParams({
      grant_type: 'refresh_token',
      refresh_token: SPOTIFY_REFRESH_TOKEN,
    });
    // TODO: Handle error state
  const response = await fetch(TOKEN_URL, {
    headers: {
      Authorization: `Basic ${BASIC}`,
      'Content-Type': 'application/x-www-form-urlencoded',
    },
    method: 'POST',
  });
  return response.json();
};

// TODO: Put API calls in the correct place
export const getDataForArtist = async (artist: string) => {
  const { access_token } = await getAccessToken();
  // TODO: Handle error state
  const response = await fetch(
    `https://api.spotify.com/v1/search?q=${artist}&type=artist&market=US&limit=1&offset=0`,
    {
      headers: {
        Authorization: `Bearer ${access_token}`,
      },
    }
  );
  const data = await response.json();
  return data?.artists?.items[0] || {};
};

// TODO: Put API calls in the correct place
export const getArtistList = async (list: string[]) => {
  const promises = list.map((item) => {
    return getDataForArtist(item);
  });
  // TODO: Handle error state
  const artistList = await Promise.all(promises);
  // Filter out any artists with low popularity as it could be a bad query
  const filteredList = artistList
    .filter((artist) => artist.popularity >= 10 && artist.images.length > 0)
    .map((artist) => {
      return { ...artist, selected: true };
    });
  return filteredList;
};

// TODO: Put API calls in the correct place
export const getTopTracksForArtist = async (artistId: string) => {
  const { access_token } = await getAccessToken();
  // TODO: Remove hardcoded limit
  // TODO: Add error handling
  const response = await fetch(
    `https://api.spotify.com/v1/artists/${artistId}/top-tracks?market=US&limit=3`,
    {
      headers: {
        Authorization: `Bearer ${access_token}`,
      },
    }
  );
  const { tracks = [] } = await response.json();
  // TODO: Allow users to pick how many songs they want per artist
  return tracks.splice(0, 5);
};

// TODO: Put API calls in the correct place
export const createPlaylistForUser = async (userId: string) => {
  const url = `https://api.spotify.com/v1/users/${userId}/playlists`;
  const payload = {
    name: 'Concert Poster to Playlist',
    description: 'A playlist generated by uploading a concert poster image',
    public: true,
  };
  const { access_token } = await getAccessToken();
  // TODO: Add error handling
  const response = await fetch(url, {
    method: 'POST',
    headers: {
      Authorization: `Bearer ${access_token}`,
    },
    body: JSON.stringify(payload),
  });
  const data = await response.json();
  console.log(`Playlist successfully created: `, data);
  return data.id;
};

// TODO: Put API calls in the correct place
export const addTracksToPlaylist = async (playlistId: string, uris: string[]) => {
  const url = `https://api.spotify.com/v1/playlists/${playlistId}/tracks`;
  const payload = {
    uris,
  };
  const { access_token } = await getAccessToken();
  // TODO: Add error handling
  const response = await fetch(url, {
    method: 'POST',
    headers: {
      Authorization: `Bearer ${access_token}`,
    },
    body: JSON.stringify(payload),
  });
  const data = await response.json();
  console.log(`Successfully added tracks to playlist ${playlistId}: `, data);
  return data;
};